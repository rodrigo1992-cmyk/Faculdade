services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - rede_kafka

  kafka1:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    networks:
      - rede_kafka
    depends_on:
      - zookeeper

  kafka2:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka2
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    networks:
      - rede_kafka
    depends_on:
      - zookeeper

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: cluster-local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092,kafka2:9093
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - rede_kafka
    depends_on:
      - kafka1
      - kafka2

  kafka-init-topics:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-init-topics
    depends_on:
      - kafka1
      - kafka2
    entrypoint: /bin/sh
    command: -c "sleep 10 && kafka-topics --create --if-not-exists --topic stream_apostas --partitions 3 --replication-factor 2 --bootstrap-server kafka1:9092,kafka2:9093"
    networks:
      - rede_kafka
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: betalert
    volumes:
      - ./postgres:/docker-entrypoint-initdb.d
    networks:
      - rede_kafka
  minio:
    image: minio/minio:latest
    container_name: minio3
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio_data:/data
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin123
    command: server /data --console-address ":9001"
    networks:
      - rede_kafka

  create-minio-bucket:
    image: minio/mc
    container_name: minio-init
    depends_on:
      - minio
    entrypoint: /bin/sh -c
    command: >
      "
      sleep 5 &&
      mc alias set local http://minio:9000 admin admin123 &&
      mc mb local/betalogs || true &&
      mc cp --recursive /data_upload/* local/betalogs/
      "
    volumes:
      - ./minio_data:/data_upload
    networks:
      - rede_kafka

  pyspark:
    build: ./docker
    container_name: pyspark3
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - MINIO_ROOT_USER= admin
      - MINIO_ROOT_PASSWORD= admin123
    ports:
      - '9999:8888'
      - '4040:4040'
    volumes:
      - ./data:/work
    networks:
      - rede_kafka
  spark:
    image: docker.io/bitnami/spark:3.5
    container_name: spark3
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    ports:
      - '8080:8080'
      - '7077:7077'
    volumes:
      - ./data:/work
    networks:
      - rede_kafka
      
  spark-worker:
    image: docker.io/bitnami/spark:3.5
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    volumes:
      - ./data:/work
    networks:
      - rede_kafka
    depends_on:
      - spark

networks:
  rede_kafka:
    name: rede_kafka
    driver: bridge
